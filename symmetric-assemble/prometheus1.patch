Subject: [PATCH] prometheus
---
Index: symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusMeterRegistryFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusMeterRegistryFactory.java b/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusMeterRegistryFactory.java
new file mode 100644
--- /dev/null	(date 1678116081161)
+++ b/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusMeterRegistryFactory.java	(date 1678116081161)
@@ -0,0 +1,50 @@
+/**
+ * Licensed to JumpMind Inc under one or more contributor
+ * license agreements.  See the NOTICE file distributed
+ * with this work for additional information regarding
+ * copyright ownership.  JumpMind Inc licenses this file
+ * to you under the GNU General Public License, version 3.0 (GPLv3)
+ * (the "License"); you may not use this file except in compliance
+ * with the License.
+ *
+ * You should have received a copy of the GNU General Public License,
+ * version 3.0 (GPLv3) along with this library; if not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.jumpmind.symmetric.web.rest;
+
+import java.io.File;
+
+import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;
+import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
+import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;
+import io.micrometer.core.instrument.binder.system.DiskSpaceMetrics;
+import io.micrometer.core.instrument.binder.system.ProcessorMetrics;
+import io.micrometer.core.instrument.binder.system.UptimeMetrics;
+import io.micrometer.prometheus.PrometheusConfig;
+import io.micrometer.prometheus.PrometheusMeterRegistry;
+
+public class PrometheusMeterRegistryFactory {
+    private final PrometheusMeterRegistry registry;
+
+    public PrometheusMeterRegistryFactory() {
+        this.registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
+        new JvmThreadMetrics().bindTo(registry);
+        new JvmGcMetrics().bindTo(registry);
+        new JvmMemoryMetrics().bindTo(registry);
+        new DiskSpaceMetrics(new File("/")).bindTo(registry);
+        new ProcessorMetrics().bindTo(registry); // metrics related to the CPU stats
+        new UptimeMetrics().bindTo(registry);
+    }
+
+    public PrometheusMeterRegistry getRegistry() {
+        return registry;
+    }
+}
Index: symmetric-io/src/test/java/org/jumpmind/symmetric/io/data/transform/ValueMapColumnTransformTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-io/src/test/java/org/jumpmind/symmetric/io/data/transform/ValueMapColumnTransformTest.java b/symmetric-io/src/test/java/org/jumpmind/symmetric/io/data/transform/ValueMapColumnTransformTest.java
--- a/symmetric-io/src/test/java/org/jumpmind/symmetric/io/data/transform/ValueMapColumnTransformTest.java	(revision 975430f9483e87443c460215b303ad6b10df78fb)
+++ b/symmetric-io/src/test/java/org/jumpmind/symmetric/io/data/transform/ValueMapColumnTransformTest.java	(date 1677954648834)
@@ -1,3 +1,23 @@
+/**
+ * Licensed to JumpMind Inc under one or more contributor
+ * license agreements.  See the NOTICE file distributed
+ * with this work for additional information regarding
+ * copyright ownership.  JumpMind Inc licenses this file
+ * to you under the GNU General Public License, version 3.0 (GPLv3)
+ * (the "License"); you may not use this file except in compliance
+ * with the License.
+ *
+ * You should have received a copy of the GNU General Public License,
+ * version 3.0 (GPLv3) along with this library; if not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
 package org.jumpmind.symmetric.io.data.transform;
 
 import org.junit.Assert;
Index: symmetric-prometheus/src/main/resources/META-INF/services/symmetric-prometheus-ext.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-prometheus/src/main/resources/META-INF/services/symmetric-prometheus-ext.xml b/symmetric-prometheus/src/main/resources/META-INF/services/symmetric-prometheus-ext.xml
new file mode 100644
--- /dev/null	(date 1678128048056)
+++ b/symmetric-prometheus/src/main/resources/META-INF/services/symmetric-prometheus-ext.xml	(date 1678128048056)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Licensed to JumpMind Inc under one or more contributor
+    license agreements.  See the NOTICE file distributed
+    with this work for additional information regarding
+    copyright ownership.  JumpMind Inc licenses this file
+    to you under the GNU General Public License, version 3.0 (GPLv3)
+    (the "License"); you may not use this file except in compliance
+    with the License.
+
+    You should have received a copy of the GNU General Public License,
+    version 3.0 (GPLv3) along with this library; if not, see
+    <http://www.gnu.org/licenses/>.
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+
+-->
+<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd" default-lazy-init="true">
+
+    <bean id="prometheusMeterRegistryFactory" class="org.jumpmind.symmetric.web.rest.PrometheusMeterRegistryFactory"/>
+
+    <bean id="prometheus" class="org.jumpmind.symmetric.web.rest.PrometheusNotifier">
+        <property name="registryFactory" ref="prometheusMeterRegistryFactory"/>
+    </bean>
+
+
+</beans>
\ No newline at end of file
Index: symmetric-client/src/main/resources/symmetric-modules.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/symmetric-client/src/main/resources/symmetric-modules.properties b/symmetric-client/src/main/resources/symmetric-modules.properties
--- a/symmetric-client/src/main/resources/symmetric-modules.properties	(revision 975430f9483e87443c460215b303ad6b10df78fb)
+++ b/symmetric-client/src/main/resources/symmetric-modules.properties	(date 1678145663733)
@@ -51,12 +51,13 @@
 sqlite=org.xerial:sqlite-jdbc:3.34.0
 #sqlserver=net.sourceforge.jtds:jtds:1.3.1
 swaggerui=org.jumpmind.symmetric:symmetric-swagger-ui:$version, io.springfox:springfox-core:2.9.2, io.springfox:springfox-schema:2.9.2, io.springfox:springfox-spi:2.9.2, io.springfox:springfox-spring-web:2.9.2, io.springfox:springfox-swagger2:2.9.2, io.springfox:springfox-swagger-common:2.9.2, io.springfox:springfox-swagger-ui:2.9.2, io.swagger:swagger-models:1.5.24, net.bytebuddy:byte-buddy:1.12.9, org.mapstruct:mapstruct:1.4.2.Final, org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE, org.springframework.plugin:spring-plugin-metadata:1.2.0.RELEASE, com.fasterxml:classmate:1.5.1, com.fasterxml.jackson.core:jackson-databind:2.13.2.2, com.fasterxml.jackson.core:jackson-annotations:2.13.2, com.fasterxml.jackson.core:jackson-core:2.13.2, com.google.guava:guava:31.1-android, com.google.guava:failureaccess:1.0.1, com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava, com.google.code.findbugs:jsr305:3.0.2, org.checkerframework:checker-compat-qual:2.5.5, com.google.errorprone:error_prone_annotations:2.12.1, com.google.j2objc:j2objc-annotations:1.3
+prometheus=org.jumpmind.symmetric:symmetric-prometheus:$version, io.micrometer:micrometer-registry-prometheus:1.9.7, io.micrometer:micrometer-core:1.9.7, io.prometheus:simpleclient_common:0.15.0, io.prometheus:simpleclient:0.15.0, io.prometheus:simpleclient_tracer_otel:0.15.0, io.prometheus:simpleclient_tracer_common:0.15.0, io.prometheus:simpleclient_tracer_otel_agent:0.15.0, org.hdrhistogram:HdrHistogram:2.1.12, org.latencyutils:LatencyUtils:2.0.3 
 sybase=jdbc.sybase:jconnect:7.7
 teradata=jdbc.teradata:terajdbc4:16.20.00.10
 tibero=jdbc.tibero:tibero:6
 topspeed=nl.cad:tps-parse:1.0.15-SNAPSHOT, com.beust:jcommander:1.30, joda-time:joda-time:2.8.1
 voltdb=org.voltdb:voltdbclient:8.4.1
-cosmos=com.azure:azure-cosmos:4.32.1
+cosmos=com.azure:azure-cosmos:4.32.1, 
 s3=com.amazonaws:aws-java-sdk-s3:1.12.199
 singlestore=com.singlestore:singlestore-jdbc-client:1.0.1
 
Index: symmetric-client-clib-assemble/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/symmetric-client-clib-assemble/gradle/wrapper/gradle-wrapper.properties b/symmetric-client-clib-assemble/gradle/wrapper/gradle-wrapper.properties
--- a/symmetric-client-clib-assemble/gradle/wrapper/gradle-wrapper.properties	(revision 975430f9483e87443c460215b303ad6b10df78fb)
+++ b/symmetric-client-clib-assemble/gradle/wrapper/gradle-wrapper.properties	(date 1677948351894)
@@ -1,6 +1,5 @@
-#Thu Jun 09 12:18:44 EDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.0-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.13-bin.zip
Index: symmetric-assemble/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-assemble/settings.gradle b/symmetric-assemble/settings.gradle
--- a/symmetric-assemble/settings.gradle	(revision 975430f9483e87443c460215b303ad6b10df78fb)
+++ b/symmetric-assemble/settings.gradle	(date 1677950659121)
@@ -1,3 +1,3 @@
 includeFlat 'symmetric-util','symmetric-db','symmetric-csv','symmetric-jdbc',
         'symmetric-io', 'symmetric-core','symmetric-client','symmetric-server',
-        'symmetric-wrapper','symmetric-android','symmetric-sqlexplorer','symmetric-swagger-ui'
\ No newline at end of file
+        'symmetric-wrapper','symmetric-android','symmetric-sqlexplorer','symmetric-swagger-ui','symmetric-prometheus'
\ No newline at end of file
Index: symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12SymmetricDialect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12SymmetricDialect.java b/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12SymmetricDialect.java
--- a/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12SymmetricDialect.java	(revision 975430f9483e87443c460215b303ad6b10df78fb)
+++ b/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12SymmetricDialect.java	(date 1677954462701)
@@ -1,3 +1,23 @@
+/**
+ * Licensed to JumpMind Inc under one or more contributor
+ * license agreements.  See the NOTICE file distributed
+ * with this work for additional information regarding
+ * copyright ownership.  JumpMind Inc licenses this file
+ * to you under the GNU General Public License, version 3.0 (GPLv3)
+ * (the "License"); you may not use this file except in compliance
+ * with the License.
+ *
+ * You should have received a copy of the GNU General Public License,
+ * version 3.0 (GPLv3) along with this library; if not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
 package org.jumpmind.symmetric.db.sqlanywhere;
 
 import org.jumpmind.db.platform.IDatabasePlatform;
Index: symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusNotifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusNotifier.java b/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusNotifier.java
new file mode 100644
--- /dev/null	(date 1678145913246)
+++ b/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusNotifier.java	(date 1678145913246)
@@ -0,0 +1,68 @@
+/**
+ * Licensed to JumpMind Inc under one or more contributor
+ * license agreements.  See the NOTICE file distributed
+ * with this work for additional information regarding
+ * copyright ownership.  JumpMind Inc licenses this file
+ * to you under the GNU General Public License, version 3.0 (GPLv3)
+ * (the "License"); you may not use this file except in compliance
+ * with the License.
+ *
+ * You should have received a copy of the GNU General Public License,
+ * version 3.0 (GPLv3) along with this library; if not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.jumpmind.symmetric.web.rest;
+
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+import io.micrometer.core.instrument.Counter;
+import org.jumpmind.symmetric.ISymmetricEngine;
+import org.jumpmind.symmetric.ext.ISymmetricEngineAware;
+import org.jumpmind.symmetric.model.MonitorEvent;
+import org.jumpmind.symmetric.model.Notification;
+import org.jumpmind.symmetric.notification.INotificationType;
+
+public class PrometheusNotifier
+        implements INotificationType,
+        ISymmetricEngineAware {
+    static PrometheusMeterRegistryFactory registryFactory;
+    private final ConcurrentMap<String, Counter> gauges = new ConcurrentHashMap<>();
+    protected ISymmetricEngine engine;
+
+    @Override
+    public void notify(Notification notification, List<MonitorEvent> monitorEvents) {
+        monitorEvents.forEach(e -> gauges.computeIfAbsent(
+                e.getMonitorId() + "." + e.getType(),
+                k -> Counter
+                        .builder("sds.event.over.threshold")
+                        .description("SDS monitored events that exceed their threshold")
+                        .tags(
+                                "srcNodeId", e.getNodeId(),
+                                "eventType", e.getType())
+                        .register(registryFactory.getRegistry()))
+                .increment());
+    }
+
+    public void setRegistryFactory(PrometheusMeterRegistryFactory registryFactory) {
+        this.registryFactory = registryFactory;
+    }
+
+    @Override
+    public void setSymmetricEngine(ISymmetricEngine engine) {
+        this.engine = engine;
+    }
+
+    @Override
+    public String getName() {
+        return "prometheus";
+    }
+}
Index: symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12TriggerTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12TriggerTemplate.java b/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12TriggerTemplate.java
--- a/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12TriggerTemplate.java	(revision 975430f9483e87443c460215b303ad6b10df78fb)
+++ b/symmetric-client/src/main/java/org/jumpmind/symmetric/db/sqlanywhere/SqlAnywhere12TriggerTemplate.java	(date 1677953900842)
@@ -1,3 +1,23 @@
+/**
+ * Licensed to JumpMind Inc under one or more contributor
+ * license agreements.  See the NOTICE file distributed
+ * with this work for additional information regarding
+ * copyright ownership.  JumpMind Inc licenses this file
+ * to you under the GNU General Public License, version 3.0 (GPLv3)
+ * (the "License"); you may not use this file except in compliance
+ * with the License.
+ *
+ * You should have received a copy of the GNU General Public License,
+ * version 3.0 (GPLv3) along with this library; if not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
 package org.jumpmind.symmetric.db.sqlanywhere;
 
 import org.jumpmind.symmetric.db.ISymmetricDialect;
Index: symmetric-server/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-server/build.gradle b/symmetric-server/build.gradle
--- a/symmetric-server/build.gradle	(revision 975430f9483e87443c460215b303ad6b10df78fb)
+++ b/symmetric-server/build.gradle	(date 1677950659115)
@@ -8,6 +8,7 @@
     dependencies {
         api project(":symmetric-client")
         compileOnly project(":symmetric-swagger-ui")
+        compileOnly project(":symmetric-prometheus")
         api "org.springframework:spring-jms:$springVersion"
         api "org.springframework:spring-web:$springVersion"
         api "org.springframework:spring-webmvc:$springVersion"
Index: symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusController.java b/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusController.java
new file mode 100644
--- /dev/null	(date 1678125745913)
+++ b/symmetric-prometheus/src/main/java/org/jumpmind/symmetric/web/rest/PrometheusController.java	(date 1678125745913)
@@ -0,0 +1,58 @@
+/**
+ * Licensed to JumpMind Inc under one or more contributor
+ * license agreements.  See the NOTICE file distributed
+ * with this work for additional information regarding
+ * copyright ownership.  JumpMind Inc licenses this file
+ * to you under the GNU General Public License, version 3.0 (GPLv3)
+ * (the "License"); you may not use this file except in compliance
+ * with the License.
+ *
+ * You should have received a copy of the GNU General Public License,
+ * version 3.0 (GPLv3) along with this library; if not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.jumpmind.symmetric.web.rest;
+
+import java.io.IOException;
+import java.io.Writer;
+
+import javax.servlet.http.HttpServletResponse;
+
+import io.prometheus.client.exporter.common.TextFormat;
+import io.swagger.annotations.ApiOperation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+
+@Controller("prometheusController")
+public class PrometheusController {
+    protected final Logger log = LoggerFactory.getLogger(getClass());
+
+    public PrometheusController() {
+        log.error("There was a controller");
+        log.warn("There was a controller");
+        log.info("There was a controller");
+        log.debug("There was a controller");
+    }
+
+    @ApiOperation(value = "Supply metrics for Prometheus")
+    @RequestMapping(value = "/metrics", method = RequestMethod.GET)
+    protected void doGet(final HttpServletResponse resp)
+            throws IOException {
+        resp.setStatus(HttpServletResponse.SC_OK);
+        resp.setContentType(TextFormat.CONTENT_TYPE_004);
+        try (Writer writer = resp.getWriter()) {
+            PrometheusNotifier.registryFactory.getRegistry().scrape(writer);
+            writer.flush();
+        }
+    }
+}
\ No newline at end of file
